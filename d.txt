<<<<<<< HEAD
Hello happy!
=======
import java.util.Scanner;

public class PasswordManager {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("请选择操作：");
            System.out.println("1.加密密码");
            System.out.println("2.解密密码");
            System.out.println("3.判断密码强度");
            System.out.println("4.生成随机密码");
            System.out.println("0.退出");

            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    encryptPassword(scanner);
                    break;
                case 2:
                    decryptPassword(scanner);
                    break;
                case 3:
                    checkPasswordStrength(scanner);
                    break;
                case 4:
                    generatePassword(scanner);
                    break;
                case 0:
                    System.exit(0);
                default:
                    System.out.println("无效的选项");
            }
        }
    }

    private static void encryptPassword(Scanner scanner) {
        System.out.println("请输入要加密的密码（长度不超过16）：");
        String password = scanner.next();
        if (!isValidPassword(password)) {
            System.out.println("无效的密码");
            return;
        }

        StringBuilder sb = new StringBuilder(password);
        for (int i = 0; i < sb.length(); i++) {
            char ch = sb.charAt(i);
            int offset = i + 1 + 3;
            int encryptedCh = ch + offset;
            sb.setCharAt(i, (char)encryptedCh);
        }

        // 将字符串的第一位和最后一位调换顺序
        char first = sb.charAt(0);
        char last = sb.charAt(sb.length() - 1);
        sb.setCharAt(0, last);
        sb.setCharAt(sb.length() - 1, first);

        // 将字符串反转
        String encryptedPassword = sb.reverse().toString();
        System.out.println("加密后的密码是：" + encryptedPassword);
    }

    private static void decryptPassword(Scanner scanner) {
        System.out.println("请输入要解密的密码（长度不超过16）：");
        String encryptedPassword = scanner.next();
        if (!isValidPassword(encryptedPassword)) {
            System.out.println("无效的密码");
            return;
        }

        // 将字符串反转
        String original = new StringBuilder(encryptedPassword).reverse().toString();

        // 将字符串的第一位和最后一位调换顺序
        char first = original.charAt(0);
        char last = original.charAt(original.length() - 1);
        original = original.substring(1, original.length() - 1);
        original = last + original + first;

        StringBuilder sb = new StringBuilder(original);
        for (int i = 0; i < sb.length(); i++) {
            char ch = sb.charAt(i);
            int offset = i + 1 + 3;
            int decryptedCh = ch - offset;
            sb.setCharAt(i, (char)decryptedCh);
        }

        String password = sb.toString();
        System.out.println("解密后的密码是：" + password);
    }

    private static void checkPasswordStrength(Scanner scanner) {
        System.out.println("请输入要判断强度的密码：");
        String password = scanner.next();

        if (!isValidPassword(password)) {
            System.out.println("无效的密码");
            return;
        }

        int length = password.length();
        boolean hasLowercase = false;
        boolean hasUppercase = false;
        boolean hasDigit = false;

        for (int i = 0; i < length; i++) {
            char ch = password.charAt(i);
            if (Character.isLowerCase(ch)) {
                hasLowercase = true;
            } else if (Character.isUpperCase(ch)) {
                hasUppercase = true;
            } else if (Character.isDigit(ch)) {
                hasDigit = true;
            }
        }

        if (length < 8 || length >= 8 && (hasLowercase && hasUppercase && hasDigit)) {
            System.out.println("高强度");
        } else if (length >= 8 && ((hasLowercase || hasUppercase) && hasDigit)) {
            System.out.println("中强度");
        } else {
            System.out.println("弱强度");
        }
    }

    private static void generatePassword(Scanner scanner) {
        System.out.println("请输入密码长度：");
        int length = scanner.nextInt();

        String upperCaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String lowerCaseChars = "abcdefghijklmnopqrstuvwxyz";
        String digits = "1234567890";
        String availableChars = upperCaseChars + lowerCaseChars + digits;

        StringBuilder sb = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            int index = (int)(Math.random() * availableChars.length());
            char ch = availableChars.charAt(index);
            sb.append(ch);
        }

        String password = sb.toString();
        System.out.println("生成的密码是：" + password);
    }

    private static boolean isValidPassword(String password) {
        if (password == null || password.length() > 16) {
            return false;
        }

        for (int i = 0; i < password.length(); i++) {
            char ch = password.charAt(i);
            if (!Character.isLetterOrDigit(ch)) {
                return false;
            }
        }

        return true;
    }
}
>>>>>>> dev
